// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * BackupCursorStorage 备份Cursor Storage 将storage.json 备份到 backup.json
 * @param {string} path
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function BackupCursorStorage(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(4176478831, path));
    return $resultPromise;
}

/**
 * @returns {Promise<$models.CursorConfig> & { cancel(): void }}
 */
export function GetCursorStorage() {
    let $resultPromise = /** @type {any} */($Call.ByID(2638770105));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * 重置Cursor Storage 将storage.json 四个字段替换新的数据
 * @param {string} path
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function ResetCursorStorage(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(3760214184, path));
    return $resultPromise;
}

/**
 * RestoreCursorStorage 从备份文件恢复配置
 * @param {string} path
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function RestoreCursorStorage(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(1750563259, path));
    return $resultPromise;
}

/**
 * @param {string} path
 * @param {boolean} isReadOnly
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function SetCursorConfigReadOnly(path, isReadOnly) {
    let $resultPromise = /** @type {any} */($Call.ByID(4215180860, path, isReadOnly));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = $models.CursorConfig.createFrom;
